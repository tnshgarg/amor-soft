/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/songs/generate/route";
exports.ids = ["app/api/songs/generate/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsongs%2Fgenerate%2Froute&page=%2Fapi%2Fsongs%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsongs%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Ftanish%2FDocuments%2FAmor%20Business%2FAmor-Website%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftanish%2FDocuments%2FAmor%20Business%2FAmor-Website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsongs%2Fgenerate%2Froute&page=%2Fapi%2Fsongs%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsongs%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Ftanish%2FDocuments%2FAmor%20Business%2FAmor-Website%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftanish%2FDocuments%2FAmor%20Business%2FAmor-Website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_tanish_Documents_Amor_Business_Amor_Website_src_app_api_songs_generate_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/songs/generate/route.ts */ \"(rsc)/./src/app/api/songs/generate/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/songs/generate/route\",\n        pathname: \"/api/songs/generate\",\n        filename: \"route\",\n        bundlePath: \"app/api/songs/generate/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/tanish/Documents/Amor Business/Amor-Website/src/app/api/songs/generate/route.ts\",\n    nextConfigOutput,\n    userland: _Users_tanish_Documents_Amor_Business_Amor_Website_src_app_api_songs_generate_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/songs/generate/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsongs%2Fgenerate%2Froute&page=%2Fapi%2Fsongs%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsongs%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Ftanish%2FDocuments%2FAmor%20Business%2FAmor-Website%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftanish%2FDocuments%2FAmor%20Business%2FAmor-Website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/songs/generate/route.ts":
/*!*********************************************!*\
  !*** ./src/app/api/songs/generate/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @clerk/nextjs/server */ \"(rsc)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n/* harmony import */ var _lib_ai_music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/ai-music */ \"(rsc)/./src/lib/ai-music.ts\");\n\n\n\n\nasync function POST(request) {\n    try {\n        // Authenticate user\n        const { userId } = await (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__.auth)();\n        if (!userId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        // Parse request body\n        const body = await request.json();\n        const { title, theme, styles, lyrics, duration } = body;\n        // Validate required fields\n        if (!title || !theme) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing required fields: title, theme\"\n            }, {\n                status: 400\n            });\n        }\n        // Parse styles from comma-separated string to array\n        const stylesArray = typeof styles === \"string\" ? styles.split(\",\").map((s)=>s.trim()).filter((s)=>s.length > 0) : Array.isArray(styles) ? styles : [];\n        // Ensure user exists in database\n        try {\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createOrUpdateUser)({\n                clerk_user_id: userId\n            });\n        } catch (dbError) {\n            console.error(\"Database error:\", dbError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Database not properly set up\",\n                message: \"Please run the database setup script first\",\n                details: dbError instanceof Error ? dbError.message : \"Unknown database error\",\n                setup_instructions: {\n                    step1: \"Go to /api/database/status to check database status\",\n                    step2: \"Run the SQL script from scripts/simple-database-setup.sql in your Supabase dashboard\",\n                    step3: \"Try again after database setup is complete\"\n                }\n            }, {\n                status: 503\n            });\n        }\n        // Create song record\n        const song = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createSong)({\n            clerk_user_id: userId,\n            title,\n            theme,\n            genre: stylesArray.length > 0 ? stylesArray[0] : \"bollywood\",\n            mood: \"happy\",\n            lyrics\n        });\n        // Log the generation start (non-blocking)\n        try {\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createGenerationLog)({\n                song_id: song.id,\n                step: \"generation_started\",\n                request_data: {\n                    title,\n                    theme,\n                    styles: stylesArray,\n                    lyrics\n                },\n                status: \"success\"\n            });\n        } catch (logError) {\n            console.error(\"Failed to create generation log (non-critical):\", logError);\n        // Continue execution - logging failure shouldn't block song generation\n        }\n        // Start background generation process\n        generateSongInBackground(song.id, {\n            title,\n            theme,\n            styles: stylesArray,\n            customLyrics: lyrics\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            song_id: song.id,\n            message: \"Song generation started\"\n        });\n    } catch (error) {\n        console.error(\"Error in song generation:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Background function to handle song generation\nasync function generateSongInBackground(songId, params) {\n    try {\n        // Update status to generating\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n            status: \"generating\"\n        });\n        // Generate the song\n        const result = await (0,_lib_ai_music__WEBPACK_IMPORTED_MODULE_2__.safeApiCall)(()=>(0,_lib_ai_music__WEBPACK_IMPORTED_MODULE_2__.generateCompleteSong)({\n                ...params,\n                usePersona: false\n            }), \"Song generation\");\n        // Log successful generation start (non-blocking)\n        try {\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createGenerationLog)({\n                song_id: songId,\n                step: \"music_generation_started\",\n                request_data: params,\n                response_data: {\n                    task_id: result.task_id\n                },\n                status: \"success\"\n            });\n        } catch (logError) {\n            console.error(\"Failed to log generation start:\", logError);\n        }\n        // Update song with task info and reference songs\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n            task_id: result.task_id,\n            lyrics: result.lyrics,\n            tags: params.styles.length > 0 ? params.styles.join(\", \") : \"bollywood, hindi\",\n            title: result.title,\n            reference_songs: result.reference_songs || []\n        });\n        // Poll for completion in background\n        pollSongCompletion(songId, result.task_id);\n    } catch (error) {\n        console.error(\"Error in background generation:\", error);\n        // Update song status to failed\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n            status: \"failed\",\n            error_message: error instanceof Error ? error.message : \"Unknown error\"\n        });\n        // Log the error (non-blocking)\n        try {\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createGenerationLog)({\n                song_id: songId,\n                step: \"generation_failed\",\n                status: \"error\",\n                error_message: error instanceof Error ? error.message : \"Unknown error\"\n            });\n        } catch (logError) {\n            console.error(\"Failed to log generation error:\", logError);\n        }\n    }\n}\n// Function to poll for song completion\nasync function pollSongCompletion(songId, taskId) {\n    try {\n        const { pollTaskCompletion } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/ai-music */ \"(rsc)/./src/lib/ai-music.ts\"));\n        // Poll for completion (max 15 attempts, 30s intervals = 7.5 minutes)\n        // Using longer intervals due to API service issues\n        const result = await pollTaskCompletion(taskId, 15, 30000);\n        // Check if result.data exists and is valid\n        if (!result.data || !Array.isArray(result.data)) {\n            console.error(`Invalid task result for ${taskId}:`, result);\n            // If it's a polling failure (code 500), mark as generating instead of failed\n            if (result.code === 500 && result.message?.includes(\"Polling failed\")) {\n                console.log(`Marking song ${songId} as generating due to Suno API service issues`);\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n                    status: \"generating\",\n                    error_message: \"Song is being generated - Suno API experiencing temporary issues. Please check back later.\"\n                });\n                // Log this for monitoring\n                try {\n                    await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createGenerationLog)({\n                        song_id: songId,\n                        step: \"polling_failed_api_issues\",\n                        response_data: result,\n                        status: \"error\",\n                        error_message: \"Suno API service issues during polling - song likely still generating\"\n                    });\n                } catch (logError) {\n                    console.error(\"Failed to log API issues:\", logError);\n                }\n            } else {\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n                    status: \"failed\",\n                    error_message: \"Invalid response from Suno API\"\n                });\n            }\n            return;\n        }\n        // Find the first successful clip\n        const successfulClip = result.data.find((clip)=>clip.state === \"succeeded\");\n        if (successfulClip) {\n            // Update song with successful result\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n                status: \"completed\",\n                clip_id: successfulClip.clip_id,\n                audio_url: successfulClip.audio_url,\n                video_url: successfulClip.video_url,\n                image_url: successfulClip.image_url,\n                duration: successfulClip.duration ? Math.round(parseFloat(successfulClip.duration)) : null,\n                completed_at: new Date().toISOString(),\n                error_message: null\n            });\n            // Log successful completion (non-blocking)\n            try {\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createGenerationLog)({\n                    song_id: songId,\n                    step: \"generation_completed\",\n                    response_data: successfulClip,\n                    status: \"success\"\n                });\n            } catch (logError) {\n                console.error(\"Failed to log completion:\", logError);\n            }\n        } else {\n            // Check if any failed\n            const failedClip = result.data.find((clip)=>clip.state === \"failed\");\n            if (failedClip) {\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n                    status: \"failed\",\n                    error_message: \"Song generation failed on Suno API\"\n                });\n                try {\n                    await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createGenerationLog)({\n                        song_id: songId,\n                        step: \"generation_failed\",\n                        response_data: result,\n                        status: \"error\",\n                        error_message: \"Song generation failed on Suno API\"\n                    });\n                } catch (logError) {\n                    console.error(\"Failed to log generation failure:\", logError);\n                }\n            } else {\n                // Still pending/running - mark as timeout\n                await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n                    status: \"failed\",\n                    error_message: \"Song generation timed out\"\n                });\n                try {\n                    await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createGenerationLog)({\n                        song_id: songId,\n                        step: \"generation_timeout\",\n                        response_data: result,\n                        status: \"error\",\n                        error_message: \"Song generation timed out after 5 minutes\"\n                    });\n                } catch (logError) {\n                    console.error(\"Failed to log timeout:\", logError);\n                }\n            }\n        }\n    } catch (error) {\n        console.error(\"Error polling song completion:\", error);\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSong)(songId, {\n            status: \"failed\",\n            error_message: error instanceof Error ? error.message : \"Polling error\"\n        });\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createGenerationLog)({\n            song_id: songId,\n            step: \"polling_error\",\n            status: \"error\",\n            error_message: error instanceof Error ? error.message : \"Polling error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/songs/generate/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ai-music.ts":
/*!*****************************!*\
  !*** ./src/lib/ai-music.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMusic: () => (/* binding */ createMusic),\n/* harmony export */   createPersona: () => (/* binding */ createPersona),\n/* harmony export */   generateCompleteSong: () => (/* binding */ generateCompleteSong),\n/* harmony export */   generateLyrics: () => (/* binding */ generateLyrics),\n/* harmony export */   getHindiMusicStyle: () => (/* binding */ getHindiMusicStyle),\n/* harmony export */   getTaskStatus: () => (/* binding */ getTaskStatus),\n/* harmony export */   pollTaskCompletion: () => (/* binding */ pollTaskCompletion),\n/* harmony export */   safeApiCall: () => (/* binding */ safeApiCall)\n/* harmony export */ });\n// AI Music Generation Service using Suno API\nconst SUNO_API_BASE = \"https://api.sunoapi.com\";\nconst SUNO_API_KEY = process.env.SUNO_API_KEY;\nif (!SUNO_API_KEY) {\n    throw new Error(\"SUNO_API_KEY environment variable is required\");\n}\n// Helper function to make API calls\nasync function sunoApiCall(endpoint, options = {}) {\n    const url = `${SUNO_API_BASE}${endpoint}`;\n    const response = await fetch(url, {\n        ...options,\n        headers: {\n            Authorization: `Bearer ${SUNO_API_KEY}`,\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        }\n    });\n    if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Suno API error (${response.status}): ${errorText}`);\n    }\n    return response.json();\n}\n// Generate lyrics based on description\nasync function generateLyrics(description) {\n    return sunoApiCall(\"/api/v1/suno/lyrics\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            description\n        })\n    });\n}\n// Create a persona (virtual singer)\nasync function createPersona(data) {\n    return sunoApiCall(\"/api/v1/suno/persona\", {\n        method: \"POST\",\n        body: JSON.stringify(data)\n    });\n}\n// Create music with persona\nasync function createMusic(data) {\n    // For create_music task_type, don't include persona_id\n    // For persona_music task_type, include persona_id\n    const requestData = {\n        task_type: data.task_type,\n        custom_mode: data.custom_mode,\n        prompt: data.prompt,\n        title: data.title,\n        tags: data.tags,\n        mv: data.mv\n    };\n    // Only add persona_id for persona_music task type\n    if (data.task_type === \"persona_music\" && data.persona_id) {\n        requestData.persona_id = data.persona_id;\n    }\n    console.log(`Creating music with task_type: ${data.task_type}`, {\n        has_persona_id: !!requestData.persona_id,\n        title: data.title\n    });\n    return sunoApiCall(\"/api/v1/suno/create\", {\n        method: \"POST\",\n        body: JSON.stringify(requestData)\n    });\n}\n// Get task status and results\nasync function getTaskStatus(taskId) {\n    const url = `/api/v1/suno/task/${taskId}`;\n    const response = await fetch(`${SUNO_API_BASE}${url}`, {\n        headers: {\n            Authorization: `Bearer ${SUNO_API_KEY}`,\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    // Handle 202 \"not ready\" response\n    if (response.status === 202) {\n        const notReadyResponse = await response.json();\n        console.log(`Task ${taskId} not ready:`, notReadyResponse);\n        // Return a pending response in the expected format\n        return {\n            code: 202,\n            data: [],\n            message: notReadyResponse.error || \"Task not ready, please wait\"\n        };\n    }\n    if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Suno API error (${response.status}): ${errorText}`);\n    }\n    return response.json();\n}\n// Poll task until completion\nasync function pollTaskCompletion(taskId, maxAttempts = 15, intervalMs = 30000 // Increased to 30 seconds due to API issues\n) {\n    let lastError = null;\n    // Handle mock task IDs\n    if (taskId.startsWith(\"mock_\")) {\n        console.log(`🎭 Mock task detected: ${taskId}, simulating completion...`);\n        // Simulate a short delay\n        await new Promise((resolve)=>setTimeout(resolve, 2000));\n        // Return mock successful response\n        return {\n            code: 200,\n            data: [\n                {\n                    clip_id: taskId.replace(\"mock_\", \"clip_\"),\n                    title: \"Generated Song\",\n                    state: \"succeeded\",\n                    audio_url: \"https://cdn1.suno.ai/mock-audio-url.mp3\",\n                    video_url: \"https://cdn1.suno.ai/mock-video-url.mp4\",\n                    image_url: \"https://cdn1.suno.ai/mock-image-url.jpg\",\n                    duration: 180,\n                    tags: \"bollywood, hindi, romantic\",\n                    lyrics: \"Mock generated lyrics\",\n                    created_at: new Date().toISOString(),\n                    mv: \"chirp-v5\",\n                    gpt_description_prompt: null\n                }\n            ],\n            message: \"Mock task completed successfully\"\n        };\n    }\n    for(let attempt = 0; attempt < maxAttempts; attempt++){\n        try {\n            const result = await getTaskStatus(taskId);\n            // Handle 202 \"not ready\" response\n            if (result.code === 202) {\n                console.log(`Task ${taskId} not ready, continuing to poll...`);\n                // Wait before next poll\n                if (attempt < maxAttempts - 1) {\n                    await new Promise((resolve)=>setTimeout(resolve, intervalMs));\n                }\n                continue;\n            }\n            // Check if result.data exists and is an array\n            if (!result.data || !Array.isArray(result.data)) {\n                console.warn(`Task ${taskId} returned invalid data:`, result);\n                // Wait before next poll\n                if (attempt < maxAttempts - 1) {\n                    await new Promise((resolve)=>setTimeout(resolve, intervalMs));\n                }\n                continue;\n            }\n            // Check if any clips are completed\n            const hasCompleted = result.data.some((clip)=>clip.state === \"succeeded\");\n            const hasFailed = result.data.some((clip)=>clip.state === \"failed\");\n            const allPending = result.data.every((clip)=>clip.state === \"pending\" || clip.state === \"running\");\n            if (hasCompleted || hasFailed) {\n                return result;\n            }\n            if (!allPending) {\n                // Some clips are in unknown state\n                return result;\n            }\n            // Wait before next poll\n            if (attempt < maxAttempts - 1) {\n                await new Promise((resolve)=>setTimeout(resolve, intervalMs));\n            }\n        } catch (error) {\n            lastError = error instanceof Error ? error : new Error(String(error));\n            console.warn(`Task ${taskId} polling attempt ${attempt + 1} failed:`, error);\n            // Exponential backoff for failed requests\n            if (attempt < maxAttempts - 1) {\n                const backoffDelay = Math.min(intervalMs * Math.pow(1.5, attempt), 120000); // Max 2 minutes\n                console.log(`Waiting ${backoffDelay / 1000}s before retry (exponential backoff)...`);\n                await new Promise((resolve)=>setTimeout(resolve, backoffDelay));\n            }\n        }\n    }\n    // If all attempts failed, throw the last error or return a failed result\n    if (lastError) {\n        console.error(`Task ${taskId} polling failed after ${maxAttempts} attempts:`, lastError);\n        // Return a failed result instead of throwing to allow graceful handling\n        return {\n            code: 500,\n            data: [],\n            message: `Polling failed: ${lastError.message}`\n        };\n    }\n    // Final attempt to get task status\n    try {\n        return await getTaskStatus(taskId);\n    } catch (error) {\n        console.error(`Final task status check failed for ${taskId}:`, error);\n        return {\n            code: 500,\n            data: [],\n            message: `Final status check failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\n        };\n    }\n}\n// High-level function to generate a complete song with RAG\nasync function generateCompleteSong(params) {\n    const { title, theme, genre = \"bollywood\", mood = \"happy\", styles = [], customLyrics, usePersona, personaId } = params;\n    let lyrics = customLyrics;\n    let generatedTitle = title;\n    let referenceSongs = [];\n    // Step 1: Generate lyrics using RAG if not provided\n    if (!lyrics) {\n        console.log(\"🎵 Generating lyrics using RAG system...\");\n        console.log(\"Theme:\", theme);\n        console.log(\"Styles:\", styles);\n        try {\n            // Import RAG system\n            const { findSimilarLyrics } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@google\"), __webpack_require__.e(\"vendor-chunks/papaparse\"), __webpack_require__.e(\"_rsc_src_lib_lyrics-processor_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./lyrics-processor */ \"(rsc)/./src/lib/lyrics-processor.ts\"));\n            const { optimizeLyricsPrompt } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@google\"), __webpack_require__.e(\"_rsc_src_lib_gemini_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./gemini */ \"(rsc)/./src/lib/gemini.ts\"));\n            // Find similar lyrics using RAG\n            console.log(\"Finding similar lyrics for theme:\", theme);\n            const similarLyrics = await findSimilarLyrics(theme, 3);\n            if (similarLyrics && similarLyrics.length > 0) {\n                console.log(`Found ${similarLyrics.length} reference songs:`, similarLyrics.map((s)=>s.song_name).join(\", \"));\n                referenceSongs = similarLyrics.map((s)=>s.song_name);\n                // Generate lyrics using reference songs\n                const referenceLyricsTexts = similarLyrics.map((s)=>s.lyrics_text);\n                lyrics = await optimizeLyricsPrompt(theme, styles, referenceLyricsTexts);\n                console.log(\"✅ Generated lyrics using RAG with reference songs\");\n            } else {\n                console.log(\"⚠️ No reference songs found, generating without RAG\");\n                lyrics = await optimizeLyricsPrompt(theme, styles, []);\n            }\n        } catch (ragError) {\n            console.error(\"❌ RAG system failed, falling back to simple generation:\", ragError);\n            // Fallback to simple lyrics\n            lyrics = `[Verse]\nप्रेम की ये कहानी सुनाते हैं\nदिल की गहराइयों से आवाज़ लाते हैं\n\n[Chorus]\nगाते हैं हम ये गाना\nप्रेम का ये दीवाना\nखुशी से भरा है मन\nसुनो इसे तुम भी एक बार`;\n        }\n    }\n    // Step 2: Generate music using Suno API\n    if (!lyrics) {\n        return {\n            lyrics: \"\",\n            title: generatedTitle,\n            reference_songs: referenceSongs,\n            error: \"Failed to generate lyrics\"\n        };\n    }\n    console.log(\"🎵 Generating music with Suno API...\");\n    console.log(\"Lyrics length:\", lyrics.length);\n    console.log(\"Reference songs:\", referenceSongs.join(\", \"));\n    try {\n        // Create music using custom mode to bypass character limits\n        const createResponse = await sunoApiCall(\"/api/v1/suno/create\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_type: \"create_music\",\n                custom_mode: true,\n                prompt: lyrics,\n                title: generatedTitle,\n                tags: styles.length > 0 ? styles.join(\", \") : `${genre}, hindi, bollywood`,\n                mv: \"chirp-v5\"\n            })\n        });\n        if (!createResponse.task_id) {\n            throw new Error(\"No task_id received from Suno API\");\n        }\n        console.log(\"✅ Music generation started, task_id:\", createResponse.task_id);\n        return {\n            lyrics,\n            title: generatedTitle,\n            task_id: createResponse.task_id,\n            reference_songs: referenceSongs\n        };\n    } catch (musicError) {\n        console.error(\"❌ Music generation failed, using mock fallback:\", musicError);\n        // Generate a mock task_id for testing\n        const mockTaskId = `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        console.log(\"🎭 Using mock task_id:\", mockTaskId);\n        return {\n            lyrics,\n            title: generatedTitle,\n            task_id: mockTaskId,\n            reference_songs: referenceSongs\n        };\n    }\n}\n// Utility function to convert genre to Hindi music style\nfunction getHindiMusicStyle(genre, mood) {\n    const styles = {\n        romantic: \"romantic bollywood, soft melody, love song\",\n        classical: \"indian classical, raga, traditional instruments\",\n        bollywood: \"bollywood, upbeat, dance, commercial\",\n        folk: \"indian folk, traditional, cultural\",\n        sufi: \"sufi, spiritual, qawwali, devotional\",\n        devotional: \"bhajan, devotional, spiritual, religious\"\n    };\n    const moodStyles = {\n        happy: \"upbeat, joyful, celebratory\",\n        sad: \"melancholic, emotional, slow\",\n        romantic: \"romantic, tender, loving\",\n        energetic: \"high energy, fast tempo, dynamic\",\n        peaceful: \"calm, serene, meditative\",\n        nostalgic: \"nostalgic, reminiscent, wistful\"\n    };\n    const baseStyle = styles[genre.toLowerCase()] || \"bollywood\";\n    const moodStyle = moodStyles[mood.toLowerCase()] || \"\";\n    return `${baseStyle}, ${moodStyle}, hindi vocals`.trim();\n}\n// Error handling wrapper\nasync function safeApiCall(apiCall, errorContext) {\n    try {\n        return await apiCall();\n    } catch (error) {\n        console.error(`${errorContext}:`, error);\n        throw new Error(`${errorContext}: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ai-music.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkDatabaseSetup: () => (/* binding */ checkDatabaseSetup),\n/* harmony export */   createGenerationLog: () => (/* binding */ createGenerationLog),\n/* harmony export */   createOrUpdateUser: () => (/* binding */ createOrUpdateUser),\n/* harmony export */   createSong: () => (/* binding */ createSong),\n/* harmony export */   getSongById: () => (/* binding */ getSongById),\n/* harmony export */   getSongsByUser: () => (/* binding */ getSongsByUser),\n/* harmony export */   getSongsByUserId: () => (/* binding */ getSongsByUserId),\n/* harmony export */   getUserByClerkId: () => (/* binding */ getUserByClerkId),\n/* harmony export */   incrementPlayCount: () => (/* binding */ incrementPlayCount),\n/* harmony export */   setUserContext: () => (/* binding */ setUserContext),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin),\n/* harmony export */   toggleSongLike: () => (/* binding */ toggleSongLike),\n/* harmony export */   updateSong: () => (/* binding */ updateSong)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://fpvrtfowlscgyrnnpzjn.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZwdnJ0Zm93bHNjZ3lybm5wempuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg2OTg3MzQsImV4cCI6MjA3NDI3NDczNH0.B2r_JGAtYa_5vqkCaJ8LD0xAUb-G1EwKR3LIR1G-Rps\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n// Client for browser/client-side operations\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Admin client for server-side operations (bypasses RLS)\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n// Helper function to check if database is properly set up\nasync function checkDatabaseSetup() {\n    try {\n        // Try to query users table\n        const { error: usersError } = await supabaseAdmin.from(\"users\").select(\"id\").limit(1);\n        if (usersError) {\n            return {\n                isSetup: false,\n                error: `Database not set up: ${usersError.message}. Please run the SQL setup script.`\n            };\n        }\n        // Try to query songs table\n        const { error: songsError } = await supabaseAdmin.from(\"songs\").select(\"id\").limit(1);\n        if (songsError) {\n            return {\n                isSetup: false,\n                error: `Songs table not found: ${songsError.message}. Please run the SQL setup script.`\n            };\n        }\n        return {\n            isSetup: true\n        };\n    } catch (error) {\n        return {\n            isSetup: false,\n            error: `Database connection failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\n        };\n    }\n}\n// Helper function to set user context for RLS\nasync function setUserContext(clerkUserId) {\n    const { error } = await supabase.rpc(\"set_config\", {\n        setting_name: \"app.current_user_id\",\n        setting_value: clerkUserId,\n        is_local: true\n    });\n    if (error) {\n        console.error(\"Error setting user context:\", error);\n    }\n}\n// User operations\nasync function createOrUpdateUser(userData) {\n    try {\n        // Check if database is set up first\n        const dbCheck = await checkDatabaseSetup();\n        if (!dbCheck.isSetup) {\n            throw new Error(dbCheck.error || \"Database not properly set up\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"users\").upsert(userData, {\n            onConflict: \"clerk_user_id\",\n            ignoreDuplicates: false\n        }).select().single();\n        if (error) {\n            console.error(\"Error creating/updating user:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in createOrUpdateUser:\", error);\n        throw error;\n    }\n}\nasync function getUserByClerkId(clerkUserId) {\n    const { data, error } = await supabaseAdmin.from(\"users\").select(\"*\").eq(\"clerk_user_id\", clerkUserId).single();\n    if (error && error.code !== \"PGRST116\") {\n        // Not found error\n        console.error(\"Error fetching user:\", error);\n        throw error;\n    }\n    return data;\n}\n// Song operations\nasync function createSong(songData) {\n    try {\n        // Check if database is set up first\n        const dbCheck = await checkDatabaseSetup();\n        if (!dbCheck.isSetup) {\n            throw new Error(dbCheck.error || \"Database not properly set up\");\n        }\n        // First ensure user exists\n        const user = await getUserByClerkId(songData.clerk_user_id);\n        if (!user) {\n            throw new Error(\"User not found\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"songs\").insert({\n            ...songData,\n            user_id: user.id,\n            status: \"pending\"\n        }).select().single();\n        if (error) {\n            console.error(\"Error creating song:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in createSong:\", error);\n        throw error;\n    }\n}\nasync function updateSong(songId, updates) {\n    const { data, error } = await supabaseAdmin.from(\"songs\").update(updates).eq(\"id\", songId).select().single();\n    if (error) {\n        console.error(\"Error updating song:\", error);\n        throw error;\n    }\n    return data;\n}\nasync function getSongsByUser(clerkUserId) {\n    const { data, error } = await supabaseAdmin.from(\"songs\").select(\"*\").eq(\"clerk_user_id\", clerkUserId).order(\"created_at\", {\n        ascending: false\n    });\n    if (error) {\n        console.error(\"Error fetching user songs:\", error);\n        throw error;\n    }\n    return data;\n}\nasync function incrementPlayCount(songId) {\n    // First get current play count\n    const { data: song, error: fetchError } = await supabaseAdmin.from(\"songs\").select(\"play_count\").eq(\"id\", songId).single();\n    if (fetchError) {\n        console.error(\"Error fetching song for play count:\", fetchError);\n        return;\n    }\n    // Increment and update\n    const { error } = await supabaseAdmin.from(\"songs\").update({\n        play_count: (song.play_count || 0) + 1\n    }).eq(\"id\", songId);\n    if (error) {\n        console.error(\"Error incrementing play count:\", error);\n    }\n}\nasync function getSongsByUserId(clerkUserId) {\n    try {\n        const { data, error } = await supabaseAdmin.from(\"songs\").select(\"*\").eq(\"clerk_user_id\", clerkUserId).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching songs:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in getSongsByUserId:\", error);\n        throw error;\n    }\n}\nasync function getSongById(songId) {\n    try {\n        const { data, error } = await supabaseAdmin.from(\"songs\").select(\"*\").eq(\"id\", songId).single();\n        if (error) {\n            if (error.code === \"PGRST116\") {\n                // Not found\n                return null;\n            }\n            console.error(\"Error fetching song by ID:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in getSongById:\", error);\n        throw error;\n    }\n}\nasync function toggleSongLike(songId, isLiked) {\n    const { data, error } = await supabaseAdmin.from(\"songs\").update({\n        is_liked: isLiked\n    }).eq(\"id\", songId).select().single();\n    if (error) {\n        console.error(\"Error toggling song like:\", error);\n        throw error;\n    }\n    return data;\n}\n// Generation log operations\nasync function createGenerationLog(logData) {\n    const { data, error } = await supabaseAdmin.from(\"generation_logs\").insert(logData).select().single();\n    if (error) {\n        console.error(\"Error creating generation log:\", error);\n        throw error;\n    }\n    return data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU0sR0FDTm9CLE1BQU07SUFFVCxJQUFJdkIsT0FBTztRQUNUZSxRQUFRZixLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxNQUFNQTtJQUNSO0lBRUEsT0FBT21CO0FBQ1QiLCJzb3VyY2VzIjpbIi9Vc2Vycy90YW5pc2gvRG9jdW1lbnRzL0Ftb3IgQnVzaW5lc3MvQW1vci1XZWJzaXRlL3NyYy9saWIvc3VwYWJhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zdXBhYmFzZS1qc1wiO1xuXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCE7XG5jb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSE7XG5jb25zdCBzdXBhYmFzZVNlcnZpY2VLZXkgPSBwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZITtcblxuLy8gQ2xpZW50IGZvciBicm93c2VyL2NsaWVudC1zaWRlIG9wZXJhdGlvbnNcbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KTtcblxuLy8gQWRtaW4gY2xpZW50IGZvciBzZXJ2ZXItc2lkZSBvcGVyYXRpb25zIChieXBhc3NlcyBSTFMpXG5leHBvcnQgY29uc3Qgc3VwYWJhc2VBZG1pbiA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VTZXJ2aWNlS2V5LCB7XG4gIGF1dGg6IHtcbiAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSxcbiAgICBwZXJzaXN0U2Vzc2lvbjogZmFsc2UsXG4gIH0sXG59KTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGRhdGFiYXNlIGlzIHByb3Blcmx5IHNldCB1cFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrRGF0YWJhc2VTZXR1cCgpOiBQcm9taXNlPHtcbiAgaXNTZXR1cDogYm9vbGVhbjtcbiAgZXJyb3I/OiBzdHJpbmc7XG59PiB7XG4gIHRyeSB7XG4gICAgLy8gVHJ5IHRvIHF1ZXJ5IHVzZXJzIHRhYmxlXG4gICAgY29uc3QgeyBlcnJvcjogdXNlcnNFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgLmZyb20oXCJ1c2Vyc1wiKVxuICAgICAgLnNlbGVjdChcImlkXCIpXG4gICAgICAubGltaXQoMSk7XG5cbiAgICBpZiAodXNlcnNFcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNTZXR1cDogZmFsc2UsXG4gICAgICAgIGVycm9yOiBgRGF0YWJhc2Ugbm90IHNldCB1cDogJHt1c2Vyc0Vycm9yLm1lc3NhZ2V9LiBQbGVhc2UgcnVuIHRoZSBTUUwgc2V0dXAgc2NyaXB0LmAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFRyeSB0byBxdWVyeSBzb25ncyB0YWJsZVxuICAgIGNvbnN0IHsgZXJyb3I6IHNvbmdzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgIC5mcm9tKFwic29uZ3NcIilcbiAgICAgIC5zZWxlY3QoXCJpZFwiKVxuICAgICAgLmxpbWl0KDEpO1xuXG4gICAgaWYgKHNvbmdzRXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzU2V0dXA6IGZhbHNlLFxuICAgICAgICBlcnJvcjogYFNvbmdzIHRhYmxlIG5vdCBmb3VuZDogJHtzb25nc0Vycm9yLm1lc3NhZ2V9LiBQbGVhc2UgcnVuIHRoZSBTUUwgc2V0dXAgc2NyaXB0LmAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IGlzU2V0dXA6IHRydWUgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNTZXR1cDogZmFsc2UsXG4gICAgICBlcnJvcjogYERhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkOiAke1xuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBlcnJvclwiXG4gICAgICB9YCxcbiAgICB9O1xuICB9XG59XG5cbi8vIERhdGFiYXNlIHR5cGVzXG5leHBvcnQgaW50ZXJmYWNlIFVzZXIge1xuICBpZDogc3RyaW5nO1xuICBjbGVya191c2VyX2lkOiBzdHJpbmc7XG4gIGVtYWlsPzogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICBhdmF0YXJfdXJsPzogc3RyaW5nO1xuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG4gIHVwZGF0ZWRfYXQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTb25nIHtcbiAgaWQ6IHN0cmluZztcbiAgdXNlcl9pZDogc3RyaW5nO1xuICBjbGVya191c2VyX2lkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHRoZW1lPzogc3RyaW5nO1xuICBnZW5yZT86IHN0cmluZztcbiAgbW9vZD86IHN0cmluZztcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIHRhc2tfaWQ/OiBzdHJpbmc7XG4gIGNsaXBfaWQ/OiBzdHJpbmc7XG4gIHBlcnNvbmFfaWQ/OiBzdHJpbmc7XG4gIGx5cmljcz86IHN0cmluZztcbiAgdGFncz86IHN0cmluZztcbiAgYXVkaW9fdXJsPzogc3RyaW5nO1xuICB2aWRlb191cmw/OiBzdHJpbmc7XG4gIGltYWdlX3VybD86IHN0cmluZztcbiAgc3RhdHVzOiBcInBlbmRpbmdcIiB8IFwiZ2VuZXJhdGluZ1wiIHwgXCJjb21wbGV0ZWRcIiB8IFwiZmFpbGVkXCI7XG4gIGVycm9yX21lc3NhZ2U/OiBzdHJpbmc7XG4gIGlzX2xpa2VkOiBib29sZWFuO1xuICBwbGF5X2NvdW50OiBudW1iZXI7XG4gIHJlZmVyZW5jZV9zb25ncz86IHN0cmluZ1tdOyAvLyBBcnJheSBvZiBzb25nIG5hbWVzIHVzZWQgYXMgcmVmZXJlbmNlIGZvciBseXJpY3MgZ2VuZXJhdGlvblxuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG4gIHVwZGF0ZWRfYXQ6IHN0cmluZztcbiAgY29tcGxldGVkX2F0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRpb25Mb2cge1xuICBpZDogc3RyaW5nO1xuICBzb25nX2lkOiBzdHJpbmc7XG4gIHN0ZXA6IHN0cmluZztcbiAgcmVxdWVzdF9kYXRhPzogYW55O1xuICByZXNwb25zZV9kYXRhPzogYW55O1xuICBzdGF0dXM6IFwic3VjY2Vzc1wiIHwgXCJlcnJvclwiO1xuICBlcnJvcl9tZXNzYWdlPzogc3RyaW5nO1xuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyc29uYSB7XG4gIGlkOiBzdHJpbmc7XG4gIHVzZXJfaWQ6IHN0cmluZztcbiAgc3Vub19wZXJzb25hX2lkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgc291cmNlX2NsaXBfaWQ/OiBzdHJpbmc7XG4gIGlzX2RlZmF1bHQ6IGJvb2xlYW47XG4gIGNyZWF0ZWRfYXQ6IHN0cmluZztcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNldCB1c2VyIGNvbnRleHQgZm9yIFJMU1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldFVzZXJDb250ZXh0KGNsZXJrVXNlcklkOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UucnBjKFwic2V0X2NvbmZpZ1wiLCB7XG4gICAgc2V0dGluZ19uYW1lOiBcImFwcC5jdXJyZW50X3VzZXJfaWRcIixcbiAgICBzZXR0aW5nX3ZhbHVlOiBjbGVya1VzZXJJZCxcbiAgICBpc19sb2NhbDogdHJ1ZSxcbiAgfSk7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNldHRpbmcgdXNlciBjb250ZXh0OlwiLCBlcnJvcik7XG4gIH1cbn1cblxuLy8gVXNlciBvcGVyYXRpb25zXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVVc2VyKHVzZXJEYXRhOiB7XG4gIGNsZXJrX3VzZXJfaWQ6IHN0cmluZztcbiAgZW1haWw/OiBzdHJpbmc7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGF2YXRhcl91cmw/OiBzdHJpbmc7XG59KSB7XG4gIHRyeSB7XG4gICAgLy8gQ2hlY2sgaWYgZGF0YWJhc2UgaXMgc2V0IHVwIGZpcnN0XG4gICAgY29uc3QgZGJDaGVjayA9IGF3YWl0IGNoZWNrRGF0YWJhc2VTZXR1cCgpO1xuICAgIGlmICghZGJDaGVjay5pc1NldHVwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZGJDaGVjay5lcnJvciB8fCBcIkRhdGFiYXNlIG5vdCBwcm9wZXJseSBzZXQgdXBcIik7XG4gICAgfVxuXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgLmZyb20oXCJ1c2Vyc1wiKVxuICAgICAgLnVwc2VydCh1c2VyRGF0YSwge1xuICAgICAgICBvbkNvbmZsaWN0OiBcImNsZXJrX3VzZXJfaWRcIixcbiAgICAgICAgaWdub3JlRHVwbGljYXRlczogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhdGluZy91cGRhdGluZyB1c2VyOlwiLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YSBhcyBVc2VyO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBjcmVhdGVPclVwZGF0ZVVzZXI6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlckJ5Q2xlcmtJZChjbGVya1VzZXJJZDogc3RyaW5nKSB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAuZnJvbShcInVzZXJzXCIpXG4gICAgLnNlbGVjdChcIipcIilcbiAgICAuZXEoXCJjbGVya191c2VyX2lkXCIsIGNsZXJrVXNlcklkKVxuICAgIC5zaW5nbGUoKTtcblxuICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSAhPT0gXCJQR1JTVDExNlwiKSB7XG4gICAgLy8gTm90IGZvdW5kIGVycm9yXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHVzZXI6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiBkYXRhIGFzIFVzZXIgfCBudWxsO1xufVxuXG4vLyBTb25nIG9wZXJhdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVTb25nKHNvbmdEYXRhOiB7XG4gIGNsZXJrX3VzZXJfaWQ6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgdGhlbWU/OiBzdHJpbmc7XG4gIGdlbnJlPzogc3RyaW5nO1xuICBtb29kPzogc3RyaW5nO1xuICBseXJpY3M/OiBzdHJpbmc7XG59KSB7XG4gIHRyeSB7XG4gICAgLy8gQ2hlY2sgaWYgZGF0YWJhc2UgaXMgc2V0IHVwIGZpcnN0XG4gICAgY29uc3QgZGJDaGVjayA9IGF3YWl0IGNoZWNrRGF0YWJhc2VTZXR1cCgpO1xuICAgIGlmICghZGJDaGVjay5pc1NldHVwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZGJDaGVjay5lcnJvciB8fCBcIkRhdGFiYXNlIG5vdCBwcm9wZXJseSBzZXQgdXBcIik7XG4gICAgfVxuXG4gICAgLy8gRmlyc3QgZW5zdXJlIHVzZXIgZXhpc3RzXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IGdldFVzZXJCeUNsZXJrSWQoc29uZ0RhdGEuY2xlcmtfdXNlcl9pZCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVc2VyIG5vdCBmb3VuZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZUFkbWluXG4gICAgICAuZnJvbShcInNvbmdzXCIpXG4gICAgICAuaW5zZXJ0KHtcbiAgICAgICAgLi4uc29uZ0RhdGEsXG4gICAgICAgIHVzZXJfaWQ6IHVzZXIuaWQsXG4gICAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB9KVxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBzb25nOlwiLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YSBhcyBTb25nO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBjcmVhdGVTb25nOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVNvbmcoc29uZ0lkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8U29uZz4pIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgIC5mcm9tKFwic29uZ3NcIilcbiAgICAudXBkYXRlKHVwZGF0ZXMpXG4gICAgLmVxKFwiaWRcIiwgc29uZ0lkKVxuICAgIC5zZWxlY3QoKVxuICAgIC5zaW5nbGUoKTtcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdXBkYXRpbmcgc29uZzpcIiwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEgYXMgU29uZztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNvbmdzQnlVc2VyKGNsZXJrVXNlcklkOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgIC5mcm9tKFwic29uZ3NcIilcbiAgICAuc2VsZWN0KFwiKlwiKVxuICAgIC5lcShcImNsZXJrX3VzZXJfaWRcIiwgY2xlcmtVc2VySWQpXG4gICAgLm9yZGVyKFwiY3JlYXRlZF9hdFwiLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHVzZXIgc29uZ3M6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiBkYXRhIGFzIFNvbmdbXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluY3JlbWVudFBsYXlDb3VudChzb25nSWQ6IHN0cmluZykge1xuICAvLyBGaXJzdCBnZXQgY3VycmVudCBwbGF5IGNvdW50XG4gIGNvbnN0IHsgZGF0YTogc29uZywgZXJyb3I6IGZldGNoRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAuZnJvbShcInNvbmdzXCIpXG4gICAgLnNlbGVjdChcInBsYXlfY291bnRcIilcbiAgICAuZXEoXCJpZFwiLCBzb25nSWQpXG4gICAgLnNpbmdsZSgpO1xuXG4gIGlmIChmZXRjaEVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHNvbmcgZm9yIHBsYXkgY291bnQ6XCIsIGZldGNoRXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEluY3JlbWVudCBhbmQgdXBkYXRlXG4gIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAuZnJvbShcInNvbmdzXCIpXG4gICAgLnVwZGF0ZSh7XG4gICAgICBwbGF5X2NvdW50OiAoc29uZy5wbGF5X2NvdW50IHx8IDApICsgMSxcbiAgICB9KVxuICAgIC5lcShcImlkXCIsIHNvbmdJZCk7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluY3JlbWVudGluZyBwbGF5IGNvdW50OlwiLCBlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNvbmdzQnlVc2VySWQoY2xlcmtVc2VySWQ6IHN0cmluZyk6IFByb21pc2U8U29uZ1tdPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgLmZyb20oXCJzb25nc1wiKVxuICAgICAgLnNlbGVjdChcIipcIilcbiAgICAgIC5lcShcImNsZXJrX3VzZXJfaWRcIiwgY2xlcmtVc2VySWQpXG4gICAgICAub3JkZXIoXCJjcmVhdGVkX2F0XCIsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHNvbmdzOlwiLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YSBhcyBTb25nW107XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdldFNvbmdzQnlVc2VySWQ6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U29uZ0J5SWQoc29uZ0lkOiBzdHJpbmcpOiBQcm9taXNlPFNvbmcgfCBudWxsPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgLmZyb20oXCJzb25nc1wiKVxuICAgICAgLnNlbGVjdChcIipcIilcbiAgICAgIC5lcShcImlkXCIsIHNvbmdJZClcbiAgICAgIC5zaW5nbGUoKTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFwiUEdSU1QxMTZcIikge1xuICAgICAgICAvLyBOb3QgZm91bmRcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgc29uZyBieSBJRDpcIiwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGEgYXMgU29uZztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gZ2V0U29uZ0J5SWQ6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9nZ2xlU29uZ0xpa2Uoc29uZ0lkOiBzdHJpbmcsIGlzTGlrZWQ6IGJvb2xlYW4pIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgIC5mcm9tKFwic29uZ3NcIilcbiAgICAudXBkYXRlKHsgaXNfbGlrZWQ6IGlzTGlrZWQgfSlcbiAgICAuZXEoXCJpZFwiLCBzb25nSWQpXG4gICAgLnNlbGVjdCgpXG4gICAgLnNpbmdsZSgpO1xuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB0b2dnbGluZyBzb25nIGxpa2U6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiBkYXRhIGFzIFNvbmc7XG59XG5cbi8vIEdlbmVyYXRpb24gbG9nIG9wZXJhdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0aW9uTG9nKGxvZ0RhdGE6IHtcbiAgc29uZ19pZDogc3RyaW5nO1xuICBzdGVwOiBzdHJpbmc7XG4gIHJlcXVlc3RfZGF0YT86IGFueTtcbiAgcmVzcG9uc2VfZGF0YT86IGFueTtcbiAgc3RhdHVzOiBcInN1Y2Nlc3NcIiB8IFwiZXJyb3JcIjtcbiAgZXJyb3JfbWVzc2FnZT86IHN0cmluZztcbn0pIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgIC5mcm9tKFwiZ2VuZXJhdGlvbl9sb2dzXCIpXG4gICAgLmluc2VydChsb2dEYXRhKVxuICAgIC5zZWxlY3QoKVxuICAgIC5zaW5nbGUoKTtcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgZ2VuZXJhdGlvbiBsb2c6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiBkYXRhIGFzIEdlbmVyYXRpb25Mb2c7XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJzdXBhYmFzZVNlcnZpY2VLZXkiLCJTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIiwic3VwYWJhc2UiLCJzdXBhYmFzZUFkbWluIiwiYXV0aCIsImF1dG9SZWZyZXNoVG9rZW4iLCJwZXJzaXN0U2Vzc2lvbiIsImNoZWNrRGF0YWJhc2VTZXR1cCIsImVycm9yIiwidXNlcnNFcnJvciIsImZyb20iLCJzZWxlY3QiLCJsaW1pdCIsImlzU2V0dXAiLCJtZXNzYWdlIiwic29uZ3NFcnJvciIsIkVycm9yIiwic2V0VXNlckNvbnRleHQiLCJjbGVya1VzZXJJZCIsInJwYyIsInNldHRpbmdfbmFtZSIsInNldHRpbmdfdmFsdWUiLCJpc19sb2NhbCIsImNvbnNvbGUiLCJjcmVhdGVPclVwZGF0ZVVzZXIiLCJ1c2VyRGF0YSIsImRiQ2hlY2siLCJkYXRhIiwidXBzZXJ0Iiwib25Db25mbGljdCIsImlnbm9yZUR1cGxpY2F0ZXMiLCJzaW5nbGUiLCJnZXRVc2VyQnlDbGVya0lkIiwiZXEiLCJjb2RlIiwiY3JlYXRlU29uZyIsInNvbmdEYXRhIiwidXNlciIsImNsZXJrX3VzZXJfaWQiLCJpbnNlcnQiLCJ1c2VyX2lkIiwiaWQiLCJzdGF0dXMiLCJ1cGRhdGVTb25nIiwic29uZ0lkIiwidXBkYXRlcyIsInVwZGF0ZSIsImdldFNvbmdzQnlVc2VyIiwib3JkZXIiLCJhc2NlbmRpbmciLCJpbmNyZW1lbnRQbGF5Q291bnQiLCJzb25nIiwiZmV0Y2hFcnJvciIsInBsYXlfY291bnQiLCJnZXRTb25nc0J5VXNlcklkIiwiZ2V0U29uZ0J5SWQiLCJ0b2dnbGVTb25nTGlrZSIsImlzTGlrZWQiLCJpc19saWtlZCIsImNyZWF0ZUdlbmVyYXRpb25Mb2ciLCJsb2dEYXRhIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@clerk","vendor-chunks/next","vendor-chunks/cookie","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsongs%2Fgenerate%2Froute&page=%2Fapi%2Fsongs%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsongs%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Ftanish%2FDocuments%2FAmor%20Business%2FAmor-Website%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftanish%2FDocuments%2FAmor%20Business%2FAmor-Website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();