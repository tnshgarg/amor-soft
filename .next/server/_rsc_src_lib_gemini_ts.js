"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_gemini_ts";
exports.ids = ["_rsc_src_lib_gemini_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/gemini.ts":
/*!***************************!*\
  !*** ./src/lib/gemini.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   geminiModel: () => (/* binding */ geminiModel),\n/* harmony export */   generateEmbedding: () => (/* binding */ generateEmbedding),\n/* harmony export */   optimizeLyricsPrompt: () => (/* binding */ optimizeLyricsPrompt),\n/* harmony export */   translateToHindi: () => (/* binding */ translateToHindi)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst geminiModel = genAI.getGenerativeModel({\n    model: \"gemini-2.0-flash-exp\"\n});\nasync function generateEmbedding(text) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"text-embedding-004\"\n        });\n        const result = await model.embedContent(text);\n        return result.embedding.values;\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        throw error;\n    }\n}\nasync function optimizeLyricsPrompt(userPrompt, styleTags, similarLyrics) {\n    const prompt = `You are a professional Hindi lyricist. Create ONLY Hindi song lyrics based on the user's request.\n\nUSER REQUEST: \"${userPrompt}\"\nSTYLE: ${styleTags.join(\", \")}\n\n${similarLyrics.length > 0 ? `REFERENCE SONGS FOR INSPIRATION:\n${similarLyrics.map((lyrics, i)=>`${i + 1}. ${lyrics.substring(0, 200)}...`).join(\"\\n\\n\")}\n\nUse these as inspiration for style and emotion, but create completely original lyrics.` : \"\"}\n\nSTRICT REQUIREMENTS:\n- Output ONLY Hindi lyrics, nothing else\n- No explanations, translations, or commentary\n- No English words except in [Section] labels\n- Use proper song structure: [Verse], [Chorus], [Bridge], [Outro]\n- Make it authentic Bollywood style\n- Keep verses 4-6 lines, chorus 4 lines\n- Use simple, beautiful Hindi words that rhyme well\n\nOUTPUT FORMAT:\n[Verse]\nHindi lyrics here...\n\n[Chorus]\nHindi lyrics here...\n\n[Verse 2]\nHindi lyrics here...\n\n[Chorus]\nHindi lyrics here...\n\n[Bridge]\nHindi lyrics here...\n\n[Outro]\nHindi lyrics here...\n\nGenerate the Hindi lyrics now:`;\n    try {\n        const result = await geminiModel.generateContent(prompt);\n        let lyrics = result.response.text().trim();\n        // Clean the response to ensure only lyrics\n        lyrics = cleanLyricsResponse(lyrics);\n        return lyrics;\n    } catch (error) {\n        console.error(\"Error optimizing lyrics prompt:\", error);\n        throw error;\n    }\n}\n// Function to clean unwanted text from lyrics response\nfunction cleanLyricsResponse(lyrics) {\n    let cleaned = lyrics.trim();\n    // Find the start of actual lyrics (first [Section] tag)\n    const lyricsStart = cleaned.search(/\\[(Verse|Chorus|Bridge|Intro|Outro)/i);\n    if (lyricsStart !== -1) {\n        cleaned = cleaned.substring(lyricsStart);\n    }\n    // Remove common unwanted suffixes\n    const unwantedPatterns = [\n        /\\*\\*[^*]*\\*\\*/g,\n        /\\*[^*]*\\*/g,\n        /I hope these lyrics[^]*$/i,\n        /These lyrics capture[^]*$/i,\n        /The song[^]*$/i,\n        /Style Elements:[^]*$/i,\n        /Explanation[^]*$/i,\n        /Translation[^]*$/i,\n        /Meaning[^]*$/i,\n        /Note:[^]*$/i,\n        /Here are[^]*$/i,\n        /This song[^]*$/i\n    ];\n    for (const pattern of unwantedPatterns){\n        cleaned = cleaned.replace(pattern, \"\");\n    }\n    // Remove any trailing explanatory text after the last verse/chorus/bridge/outro\n    const lastSectionMatch = cleaned.match(/(\\[(?:Verse|Chorus|Bridge|Outro)[^\\]]*\\][^]*?)(?:\\n\\n[A-Z]|$)/i);\n    if (lastSectionMatch) {\n        const lastSectionEnd = cleaned.lastIndexOf(lastSectionMatch[1]) + lastSectionMatch[1].length;\n        cleaned = cleaned.substring(0, lastSectionEnd);\n    }\n    return cleaned.trim();\n}\nasync function translateToHindi(englishText) {\n    const prompt = `\nTranslate the following text to Hindi, maintaining the poetic and musical quality:\n\n\"${englishText}\"\n\nProvide only the Hindi translation:\n`;\n    try {\n        const result = await geminiModel.generateContent(prompt);\n        return result.response.text();\n    } catch (error) {\n        console.error(\"Error translating to Hindi:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/gemini.ts\n");

/***/ })

};
;