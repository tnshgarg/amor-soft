"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_gemini_ts";
exports.ids = ["_rsc_src_lib_gemini_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/gemini.ts":
/*!***************************!*\
  !*** ./src/lib/gemini.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   geminiModel: () => (/* binding */ geminiModel),\n/* harmony export */   generateEmbedding: () => (/* binding */ generateEmbedding),\n/* harmony export */   optimizeLyricsPrompt: () => (/* binding */ optimizeLyricsPrompt)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst geminiModel = genAI.getGenerativeModel({\n    model: \"gemini-2.5-pro\"\n});\nasync function generateEmbedding(text) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"text-embedding-004\"\n        });\n        const result = await model.embedContent(text);\n        return result.embedding.values;\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        throw error;\n    }\n}\nasync function optimizeLyricsPrompt(userPrompt, styleTags, similarLyrics) {\n    const prompt = `You are a professional Hindi lyricist. Write ORIGINAL, modern Bollywood-style Hindi song lyrics based on the user's request.\n\nUSER REQUEST: \"${userPrompt}\"\nSTYLE: ${styleTags.join(\", \")}\n\n${similarLyrics.length > 0 ? `REFERENCE SONGS FOR INSPIRATION:\n${similarLyrics.map((lyrics, i)=>`${i + 1}. ${lyrics.substring(0, 200)}...`).join(\"\\n\\n\")}\n\nUse these only for emotion, vibe, and flow. Do NOT copy rare, complex, or niche words; replace them with simple, melodic Hindi or minor English words.` : \"\"}\n\nSTRICT REQUIREMENTS:\n- Output ONLY Hindi song lyrics (Hinglish words allowed sparingly for natural modern feel)\n- Avoid very heavy, old-fashioned, or niche Hindi words and cultural references\n- Avoid slang, internet memes, or uncommon English words that are hard to pronounce\n- Lyrics must be easy to sing with smooth, melodic flow\n- Short to medium-length phrases; natural rhythm for modern Bollywood songs\n- Modern, youthful, romantic Hindi with memorable rhymes and emotional impact\n- Minor English words (like \"love\", \"baby\", \"forever\") are okay, max 1–2 per line\n- Song structure: [Verse], [Chorus], [Verse 2], [Chorus], [Bridge], [Outro]\n- Verses: 4–6 lines, Chorus: 4 lines\n- Maintain emotional depth and connection, with hooks that feel natural in singing\n\nOUTPUT FORMAT:\n[Verse]\nLyrics here...\n\n[Chorus]\nLyrics here...\n\n[Verse 2]\nLyrics here...\n\n[Chorus]\nLyrics here...\n\n[Bridge]\nLyrics here...\n\n[Outro]\nLyrics here...\n\nGenerate the modern Hindi lyrics now:`;\n    try {\n        const result = await geminiModel.generateContent(prompt);\n        let lyrics = result.response.text().trim();\n        // Clean the response to ensure only lyrics\n        lyrics = cleanLyricsResponse(lyrics);\n        return lyrics;\n    } catch (error) {\n        console.error(\"Error optimizing lyrics prompt:\", error);\n        throw error;\n    }\n}\n// Function to clean unwanted text from lyrics response\nfunction cleanLyricsResponse(lyrics) {\n    let cleaned = lyrics.trim();\n    // Find the start of actual lyrics (first [Section] tag)\n    const lyricsStart = cleaned.search(/\\[(Verse|Chorus|Bridge|Intro|Outro)/i);\n    if (lyricsStart !== -1) {\n        cleaned = cleaned.substring(lyricsStart);\n    }\n    // Remove common unwanted suffixes\n    const unwantedPatterns = [\n        /\\*\\*[^*]*\\*\\*/g,\n        /\\*[^*]*\\*/g,\n        /I hope these lyrics[^]*$/i,\n        /These lyrics capture[^]*$/i,\n        /The song[^]*$/i,\n        /Style Elements:[^]*$/i,\n        /Explanation[^]*$/i,\n        /Translation[^]*$/i,\n        /Meaning[^]*$/i,\n        /Note:[^]*$/i,\n        /Here are[^]*$/i,\n        /This song[^]*$/i\n    ];\n    for (const pattern of unwantedPatterns){\n        cleaned = cleaned.replace(pattern, \"\");\n    }\n    // Remove any trailing explanatory text after the last verse/chorus/bridge/outro\n    const lastSectionMatch = cleaned.match(/(\\[(?:Verse|Chorus|Bridge|Outro)[^\\]]*\\][^]*?)(?:\\n\\n[A-Z]|$)/i);\n    if (lastSectionMatch) {\n        const lastSectionEnd = cleaned.lastIndexOf(lastSectionMatch[1]) + lastSectionMatch[1].length;\n        cleaned = cleaned.substring(0, lastSectionEnd);\n    }\n    return cleaned.trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2dlbWluaS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJEO0FBRTNELE1BQU1DLFFBQVEsSUFBSUQscUVBQWtCQSxDQUFDRSxRQUFRQyxHQUFHLENBQUNDLGNBQWM7QUFFeEQsTUFBTUMsY0FBY0osTUFBTUssa0JBQWtCLENBQUM7SUFDbERDLE9BQU87QUFDVCxHQUFHO0FBRUksZUFBZUMsa0JBQWtCQyxJQUFZO0lBQ2xELElBQUk7UUFDRixNQUFNRixRQUFRTixNQUFNSyxrQkFBa0IsQ0FBQztZQUFFQyxPQUFPO1FBQXFCO1FBQ3JFLE1BQU1HLFNBQVMsTUFBTUgsTUFBTUksWUFBWSxDQUFDRjtRQUN4QyxPQUFPQyxPQUFPRSxTQUFTLENBQUNDLE1BQU07SUFDaEMsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLE1BQU1BO0lBQ1I7QUFDRjtBQUVPLGVBQWVFLHFCQUNwQkMsVUFBa0IsRUFDbEJDLFNBQW1CLEVBQ25CQyxhQUF1QjtJQUV2QixNQUFNQyxTQUFTLENBQUM7O2VBRUgsRUFBRUgsV0FBVztPQUNyQixFQUFFQyxVQUFVRyxJQUFJLENBQUMsTUFBTTs7QUFFOUIsRUFDRUYsY0FBY0csTUFBTSxHQUFHLElBQ25CLENBQUM7QUFDUCxFQUFFSCxjQUNDSSxHQUFHLENBQUMsQ0FBQ0MsUUFBUUMsSUFBTSxHQUFHQSxJQUFJLEVBQUUsRUFBRSxFQUFFRCxPQUFPRSxTQUFTLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUM3REwsSUFBSSxDQUFDLFFBQVE7O3NKQUVzSSxDQUFDLEdBQ2pKLEdBQ0w7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0FpQ29DLENBQUM7SUFFcEMsSUFBSTtRQUNGLE1BQU1YLFNBQVMsTUFBTUwsWUFBWXNCLGVBQWUsQ0FBQ1A7UUFDakQsSUFBSUksU0FBU2QsT0FBT2tCLFFBQVEsQ0FBQ25CLElBQUksR0FBR29CLElBQUk7UUFFeEMsMkNBQTJDO1FBQzNDTCxTQUFTTSxvQkFBb0JOO1FBRTdCLE9BQU9BO0lBQ1QsRUFBRSxPQUFPVixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxtQ0FBbUNBO1FBQ2pELE1BQU1BO0lBQ1I7QUFDRjtBQUVBLHVEQUF1RDtBQUN2RCxTQUFTZ0Isb0JBQW9CTixNQUFjO0lBQ3pDLElBQUlPLFVBQVVQLE9BQU9LLElBQUk7SUFFekIsd0RBQXdEO0lBQ3hELE1BQU1HLGNBQWNELFFBQVFFLE1BQU0sQ0FBQztJQUNuQyxJQUFJRCxnQkFBZ0IsQ0FBQyxHQUFHO1FBQ3RCRCxVQUFVQSxRQUFRTCxTQUFTLENBQUNNO0lBQzlCO0lBRUEsa0NBQWtDO0lBQ2xDLE1BQU1FLG1CQUFtQjtRQUN2QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVELEtBQUssTUFBTUMsV0FBV0QsaUJBQWtCO1FBQ3RDSCxVQUFVQSxRQUFRSyxPQUFPLENBQUNELFNBQVM7SUFDckM7SUFFQSxnRkFBZ0Y7SUFDaEYsTUFBTUUsbUJBQW1CTixRQUFRTyxLQUFLLENBQ3BDO0lBRUYsSUFBSUQsa0JBQWtCO1FBQ3BCLE1BQU1FLGlCQUNKUixRQUFRUyxXQUFXLENBQUNILGdCQUFnQixDQUFDLEVBQUUsSUFBSUEsZ0JBQWdCLENBQUMsRUFBRSxDQUFDZixNQUFNO1FBQ3ZFUyxVQUFVQSxRQUFRTCxTQUFTLENBQUMsR0FBR2E7SUFDakM7SUFFQSxPQUFPUixRQUFRRixJQUFJO0FBQ3JCIiwic291cmNlcyI6WyIvVXNlcnMvdGFuaXNoL0RvY3VtZW50cy9BbW9yIEJ1c2luZXNzL0Ftb3ItV2Vic2l0ZS9zcmMvbGliL2dlbWluaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHb29nbGVHZW5lcmF0aXZlQUkgfSBmcm9tIFwiQGdvb2dsZS9nZW5lcmF0aXZlLWFpXCI7XG5cbmNvbnN0IGdlbkFJID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSShwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWSEpO1xuXG5leHBvcnQgY29uc3QgZ2VtaW5pTW9kZWwgPSBnZW5BSS5nZXRHZW5lcmF0aXZlTW9kZWwoe1xuICBtb2RlbDogXCJnZW1pbmktMi41LXByb1wiLFxufSk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUVtYmVkZGluZyh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcltdPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgbW9kZWwgPSBnZW5BSS5nZXRHZW5lcmF0aXZlTW9kZWwoeyBtb2RlbDogXCJ0ZXh0LWVtYmVkZGluZy0wMDRcIiB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtb2RlbC5lbWJlZENvbnRlbnQodGV4dCk7XG4gICAgcmV0dXJuIHJlc3VsdC5lbWJlZGRpbmcudmFsdWVzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZW5lcmF0aW5nIGVtYmVkZGluZzpcIiwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvcHRpbWl6ZUx5cmljc1Byb21wdChcbiAgdXNlclByb21wdDogc3RyaW5nLFxuICBzdHlsZVRhZ3M6IHN0cmluZ1tdLFxuICBzaW1pbGFyTHlyaWNzOiBzdHJpbmdbXVxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgcHJvbXB0ID0gYFlvdSBhcmUgYSBwcm9mZXNzaW9uYWwgSGluZGkgbHlyaWNpc3QuIFdyaXRlIE9SSUdJTkFMLCBtb2Rlcm4gQm9sbHl3b29kLXN0eWxlIEhpbmRpIHNvbmcgbHlyaWNzIGJhc2VkIG9uIHRoZSB1c2VyJ3MgcmVxdWVzdC5cblxuVVNFUiBSRVFVRVNUOiBcIiR7dXNlclByb21wdH1cIlxuU1RZTEU6ICR7c3R5bGVUYWdzLmpvaW4oXCIsIFwiKX1cblxuJHtcbiAgc2ltaWxhckx5cmljcy5sZW5ndGggPiAwXG4gICAgPyBgUkVGRVJFTkNFIFNPTkdTIEZPUiBJTlNQSVJBVElPTjpcbiR7c2ltaWxhckx5cmljc1xuICAubWFwKChseXJpY3MsIGkpID0+IGAke2kgKyAxfS4gJHtseXJpY3Muc3Vic3RyaW5nKDAsIDIwMCl9Li4uYClcbiAgLmpvaW4oXCJcXG5cXG5cIil9XG5cblVzZSB0aGVzZSBvbmx5IGZvciBlbW90aW9uLCB2aWJlLCBhbmQgZmxvdy4gRG8gTk9UIGNvcHkgcmFyZSwgY29tcGxleCwgb3IgbmljaGUgd29yZHM7IHJlcGxhY2UgdGhlbSB3aXRoIHNpbXBsZSwgbWVsb2RpYyBIaW5kaSBvciBtaW5vciBFbmdsaXNoIHdvcmRzLmBcbiAgICA6IFwiXCJcbn1cblxuU1RSSUNUIFJFUVVJUkVNRU5UUzpcbi0gT3V0cHV0IE9OTFkgSGluZGkgc29uZyBseXJpY3MgKEhpbmdsaXNoIHdvcmRzIGFsbG93ZWQgc3BhcmluZ2x5IGZvciBuYXR1cmFsIG1vZGVybiBmZWVsKVxuLSBBdm9pZCB2ZXJ5IGhlYXZ5LCBvbGQtZmFzaGlvbmVkLCBvciBuaWNoZSBIaW5kaSB3b3JkcyBhbmQgY3VsdHVyYWwgcmVmZXJlbmNlc1xuLSBBdm9pZCBzbGFuZywgaW50ZXJuZXQgbWVtZXMsIG9yIHVuY29tbW9uIEVuZ2xpc2ggd29yZHMgdGhhdCBhcmUgaGFyZCB0byBwcm9ub3VuY2Vcbi0gTHlyaWNzIG11c3QgYmUgZWFzeSB0byBzaW5nIHdpdGggc21vb3RoLCBtZWxvZGljIGZsb3dcbi0gU2hvcnQgdG8gbWVkaXVtLWxlbmd0aCBwaHJhc2VzOyBuYXR1cmFsIHJoeXRobSBmb3IgbW9kZXJuIEJvbGx5d29vZCBzb25nc1xuLSBNb2Rlcm4sIHlvdXRoZnVsLCByb21hbnRpYyBIaW5kaSB3aXRoIG1lbW9yYWJsZSByaHltZXMgYW5kIGVtb3Rpb25hbCBpbXBhY3Rcbi0gTWlub3IgRW5nbGlzaCB3b3JkcyAobGlrZSBcImxvdmVcIiwgXCJiYWJ5XCIsIFwiZm9yZXZlclwiKSBhcmUgb2theSwgbWF4IDHigJMyIHBlciBsaW5lXG4tIFNvbmcgc3RydWN0dXJlOiBbVmVyc2VdLCBbQ2hvcnVzXSwgW1ZlcnNlIDJdLCBbQ2hvcnVzXSwgW0JyaWRnZV0sIFtPdXRyb11cbi0gVmVyc2VzOiA04oCTNiBsaW5lcywgQ2hvcnVzOiA0IGxpbmVzXG4tIE1haW50YWluIGVtb3Rpb25hbCBkZXB0aCBhbmQgY29ubmVjdGlvbiwgd2l0aCBob29rcyB0aGF0IGZlZWwgbmF0dXJhbCBpbiBzaW5naW5nXG5cbk9VVFBVVCBGT1JNQVQ6XG5bVmVyc2VdXG5MeXJpY3MgaGVyZS4uLlxuXG5bQ2hvcnVzXVxuTHlyaWNzIGhlcmUuLi5cblxuW1ZlcnNlIDJdXG5MeXJpY3MgaGVyZS4uLlxuXG5bQ2hvcnVzXVxuTHlyaWNzIGhlcmUuLi5cblxuW0JyaWRnZV1cbkx5cmljcyBoZXJlLi4uXG5cbltPdXRyb11cbkx5cmljcyBoZXJlLi4uXG5cbkdlbmVyYXRlIHRoZSBtb2Rlcm4gSGluZGkgbHlyaWNzIG5vdzpgO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2VtaW5pTW9kZWwuZ2VuZXJhdGVDb250ZW50KHByb21wdCk7XG4gICAgbGV0IGx5cmljcyA9IHJlc3VsdC5yZXNwb25zZS50ZXh0KCkudHJpbSgpO1xuXG4gICAgLy8gQ2xlYW4gdGhlIHJlc3BvbnNlIHRvIGVuc3VyZSBvbmx5IGx5cmljc1xuICAgIGx5cmljcyA9IGNsZWFuTHlyaWNzUmVzcG9uc2UobHlyaWNzKTtcblxuICAgIHJldHVybiBseXJpY3M7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIG9wdGltaXppbmcgbHlyaWNzIHByb21wdDpcIiwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGNsZWFuIHVud2FudGVkIHRleHQgZnJvbSBseXJpY3MgcmVzcG9uc2VcbmZ1bmN0aW9uIGNsZWFuTHlyaWNzUmVzcG9uc2UobHlyaWNzOiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgY2xlYW5lZCA9IGx5cmljcy50cmltKCk7XG5cbiAgLy8gRmluZCB0aGUgc3RhcnQgb2YgYWN0dWFsIGx5cmljcyAoZmlyc3QgW1NlY3Rpb25dIHRhZylcbiAgY29uc3QgbHlyaWNzU3RhcnQgPSBjbGVhbmVkLnNlYXJjaCgvXFxbKFZlcnNlfENob3J1c3xCcmlkZ2V8SW50cm98T3V0cm8pL2kpO1xuICBpZiAobHlyaWNzU3RhcnQgIT09IC0xKSB7XG4gICAgY2xlYW5lZCA9IGNsZWFuZWQuc3Vic3RyaW5nKGx5cmljc1N0YXJ0KTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBjb21tb24gdW53YW50ZWQgc3VmZml4ZXNcbiAgY29uc3QgdW53YW50ZWRQYXR0ZXJucyA9IFtcbiAgICAvXFwqXFwqW14qXSpcXCpcXCovZywgLy8gQm9sZCB0ZXh0XG4gICAgL1xcKlteKl0qXFwqL2csIC8vIEl0YWxpYyB0ZXh0XG4gICAgL0kgaG9wZSB0aGVzZSBseXJpY3NbXl0qJC9pLFxuICAgIC9UaGVzZSBseXJpY3MgY2FwdHVyZVteXSokL2ksXG4gICAgL1RoZSBzb25nW15dKiQvaSxcbiAgICAvU3R5bGUgRWxlbWVudHM6W15dKiQvaSxcbiAgICAvRXhwbGFuYXRpb25bXl0qJC9pLFxuICAgIC9UcmFuc2xhdGlvblteXSokL2ksXG4gICAgL01lYW5pbmdbXl0qJC9pLFxuICAgIC9Ob3RlOlteXSokL2ksXG4gICAgL0hlcmUgYXJlW15dKiQvaSxcbiAgICAvVGhpcyBzb25nW15dKiQvaSxcbiAgXTtcblxuICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgdW53YW50ZWRQYXR0ZXJucykge1xuICAgIGNsZWFuZWQgPSBjbGVhbmVkLnJlcGxhY2UocGF0dGVybiwgXCJcIik7XG4gIH1cblxuICAvLyBSZW1vdmUgYW55IHRyYWlsaW5nIGV4cGxhbmF0b3J5IHRleHQgYWZ0ZXIgdGhlIGxhc3QgdmVyc2UvY2hvcnVzL2JyaWRnZS9vdXRyb1xuICBjb25zdCBsYXN0U2VjdGlvbk1hdGNoID0gY2xlYW5lZC5tYXRjaChcbiAgICAvKFxcWyg/OlZlcnNlfENob3J1c3xCcmlkZ2V8T3V0cm8pW15cXF1dKlxcXVteXSo/KSg/OlxcblxcbltBLVpdfCQpL2lcbiAgKTtcbiAgaWYgKGxhc3RTZWN0aW9uTWF0Y2gpIHtcbiAgICBjb25zdCBsYXN0U2VjdGlvbkVuZCA9XG4gICAgICBjbGVhbmVkLmxhc3RJbmRleE9mKGxhc3RTZWN0aW9uTWF0Y2hbMV0pICsgbGFzdFNlY3Rpb25NYXRjaFsxXS5sZW5ndGg7XG4gICAgY2xlYW5lZCA9IGNsZWFuZWQuc3Vic3RyaW5nKDAsIGxhc3RTZWN0aW9uRW5kKTtcbiAgfVxuXG4gIHJldHVybiBjbGVhbmVkLnRyaW0oKTtcbn1cbiJdLCJuYW1lcyI6WyJHb29nbGVHZW5lcmF0aXZlQUkiLCJnZW5BSSIsInByb2Nlc3MiLCJlbnYiLCJHRU1JTklfQVBJX0tFWSIsImdlbWluaU1vZGVsIiwiZ2V0R2VuZXJhdGl2ZU1vZGVsIiwibW9kZWwiLCJnZW5lcmF0ZUVtYmVkZGluZyIsInRleHQiLCJyZXN1bHQiLCJlbWJlZENvbnRlbnQiLCJlbWJlZGRpbmciLCJ2YWx1ZXMiLCJlcnJvciIsImNvbnNvbGUiLCJvcHRpbWl6ZUx5cmljc1Byb21wdCIsInVzZXJQcm9tcHQiLCJzdHlsZVRhZ3MiLCJzaW1pbGFyTHlyaWNzIiwicHJvbXB0Iiwiam9pbiIsImxlbmd0aCIsIm1hcCIsImx5cmljcyIsImkiLCJzdWJzdHJpbmciLCJnZW5lcmF0ZUNvbnRlbnQiLCJyZXNwb25zZSIsInRyaW0iLCJjbGVhbkx5cmljc1Jlc3BvbnNlIiwiY2xlYW5lZCIsImx5cmljc1N0YXJ0Iiwic2VhcmNoIiwidW53YW50ZWRQYXR0ZXJucyIsInBhdHRlcm4iLCJyZXBsYWNlIiwibGFzdFNlY3Rpb25NYXRjaCIsIm1hdGNoIiwibGFzdFNlY3Rpb25FbmQiLCJsYXN0SW5kZXhPZiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/gemini.ts\n");

/***/ })

};
;